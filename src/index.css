// =================================================================
// FILE: src/components/Card.js
// =================================================================
import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Maximize, Minimize } from 'lucide-react';

const Card = ({ title, icon, children, onMaximize, isMaximized, onMinimize, defaultOpen = true }) => {
    const [isOpen, setIsOpen] = useState(defaultOpen);
    return (
        <div className={`bg-gray-800/50 border border-gray-700 rounded-lg shadow-lg backdrop-blur-sm transition-all duration-300 ${isMaximized ? 'fixed inset-2 z-50 overflow-y-auto' : ''}`}>
            <div className="flex items-center justify-between p-3 border-b border-gray-700 cursor-pointer sticky top-0 bg-gray-800/80 z-10" onClick={() => !isMaximized && setIsOpen(!isOpen)}>
                <div className="flex items-center space-x-3">
                    {icon}
                    <h3 className="font-semibold text-sky-300">{title}</h3>
                </div>
                <div className="flex items-center space-x-2">
                    {onMaximize && (isMaximized ? (
                        <Minimize className="w-4 h-4 text-gray-400 hover:text-white" onClick={(e) => {e.stopPropagation(); onMinimize();}}/>
                    ) : (
                        <Maximize className="w-4 h-4 text-gray-400 hover:text-white" onClick={(e) => {e.stopPropagation(); onMaximize();}}/>
                    ))}
                    {isOpen ? <ChevronUp className="w-5 h-5 text-gray-400" /> : <ChevronDown className="w-5 h-5 text-gray-400" />}
                </div>
            </div>
            {isOpen && <div className="p-4">{children}</div>}
        </div>
    );
};
export default Card;

// =================================================================
// FILE: src/components/Modal.js
// =================================================================
import React from 'react';

const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black/60 z-[100] flex items-center justify-center backdrop-blur-sm" onClick={onClose}>
            <div className="bg-gray-800 border border-gray-700 rounded-lg shadow-xl w-full max-w-2xl p-6" onClick={e => e.stopPropagation()}>
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-semibold text-sky-300">{title}</h3>
                    <button onClick={onClose} className="text-gray-400 hover:text-white text-2xl">&times;</button>
                </div>
                {children}
            </div>
        </div>
    );
};
export default Modal;


// =================================================================
// FILE: src/components/Slider.js
// =================================================================
import React from 'react';

const Slider = ({ label, value, onChange, min, max, step, unit }) => (
    <div className="w-full">
        <div className="flex justify-between items-center mb-1">
            <label className="text-sm text-gray-300">{label}</label>
            <span className="text-sm font-mono bg-gray-900 px-2 py-0.5 rounded text-cyan-300">{value}{unit}</span>
        </div>
        <input type="range" min={min} max={max} step={step} value={value} onChange={e => onChange(parseFloat(e.target.value))} className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer range-sm"/>
    </div>
);
export default Slider;

// =================================================================
// FILE: src/components/valuation/WaccCalculatorModal.js
// =================================================================
import React, { useState, useEffect } from 'react';
import Modal from '../Modal';
import Slider from '../Slider';

const WaccCalculatorModal = ({ isOpen, onClose, wacc, setWacc }) => {
    const [costOfEquity, setCostOfEquity] = useState(9.5);
    const [costOfDebt, setCostOfDebt] = useState(5.0);
    const [taxRate, setTaxRate] = useState(21);
    const [equityWeight, setEquityWeight] = useState(70);
    
    useEffect(() => {
        const debtWeight = 100 - equityWeight;
        const calculatedWacc = (equityWeight / 100 * costOfEquity / 100) + (debtWeight / 100 * costOfDebt / 100 * (1 - taxRate / 100));
        setWacc(parseFloat((calculatedWacc * 100).toFixed(2)));
    }, [costOfEquity, costOfDebt, taxRate, equityWeight, setWacc]);

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="WACC Calculator">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                    <Slider label="Cost of Equity" value={costOfEquity} onChange={setCostOfEquity} min={5} max={15} step={0.1} unit="%"/>
                    <Slider label="Cost of Debt" value={costOfDebt} onChange={setCostOfDebt} min={2} max={8} step={0.1} unit="%"/>
                    <Slider label="Corporate Tax Rate" value={taxRate} onChange={setTaxRate} min={15} max={30} step={0.5} unit="%"/>
                    <Slider label="Weight of Equity" value={equityWeight} onChange={setEquityWeight} min={0} max={100} step={1} unit="%"/>
                </div>
                <div className="p-4 bg-gray-900/50 rounded-lg flex flex-col justify-center items-center">
                    <h4 className="text-lg font-bold text-cyan-300">Calculated WACC</h4>
                    <p className="text-4xl font-mono text-white mt-2">{wacc}%</p>
                    <p className="text-sm text-gray-400 mt-2">Weight of Debt: {100 - equityWeight}%</p>
                </div>
            </div>
        </Modal>
    );
};
export default WaccCalculatorModal;

// =================================================================
// FILE: src/components/valuation/DCFCalculator.js
// =================================================================
import React, { useState, useMemo } from 'react';
import { ScatterChart, Scatter, ZAxis, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { Zap, Calculator } from 'lucide-react';
import Slider from '../Slider';
import WaccCalculatorModal from './WaccCalculatorModal';
import { calculateDCF } from '../../utils/calculations';
import { formatLargeNumber } from '../../utils/formatters';

const DCFCalculator = ({ cashFlows, setCashFlows, wacc, setWacc, terminalGrowth, setTerminalGrowth, dcfAnalysis }) => {
    const [monteCarloSims, setMonteCarloSims] = useState(null);
    const [isWaccModalOpen, setIsWaccModalOpen] = useState(false);

    const runMonteCarlo = () => {
        const iterations = 10000;
        const results = [];
        for (let i = 0; i < iterations; i++) {
            const simWacc = wacc * (1 + (Math.random() - 0.5) * 0.1);
            const simGrowth = terminalGrowth * (1 + (Math.random() - 0.5) * 0.2);
            const simCFs = cashFlows.map(cf => cf * (1 + (Math.random() - 0.5) * 0.1));
            if (simWacc > simGrowth) {
                const { enterpriseValue: simEV } = calculateDCF(simCFs, simWacc, simGrowth);
                results.push(simEV);
            }
        }
        const min = Math.min(...results);
        const max = Math.max(...results);
        const buckets = 10;
        const bucketSize = (max-min)/buckets;
        const histogram = Array(buckets).fill(0).map((_,i) => {
            const bucketMin = min + i * bucketSize;
            const bucketMax = bucketMin + bucketSize;
            return { name: `${formatLargeNumber(bucketMin)} - ${formatLargeNumber(bucketMax)}`, count: results.filter(r => r >= bucketMin && r < bucketMax).length }
        });
        setMonteCarloSims(histogram);
    };
    
    const sensitivityData = useMemo(() => {
        const waccRange = Array.from({length: 7}, (_, i) => wacc - 1.5 + i * 0.5);
        const growthRange = Array.from({length: 7}, (_, i) => terminalGrowth - 1.5 + i * 0.5);
        let data = [];
        growthRange.forEach(g => {
            waccRange.forEach(w => {
                if (w > g) {
                    const { enterpriseValue: ev } = calculateDCF(cashFlows, w, g);
                    data.push({ wacc: w.toFixed(2), growth: g.toFixed(2), value: ev });
                }
            });
        });
        return data;
    }, [cashFlows, wacc, terminalGrowth]);

    return (
        <div className="space-y-6">
            <WaccCalculatorModal isOpen={isWaccModalOpen} onClose={() => setIsWaccModalOpen(false)} wacc={wacc} setWacc={setWacc} />
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                    <div className="flex justify-between items-center mb-3">
                        <h4 className="text-lg font-semibold text-gray-100">Core Assumptions</h4>
                        <button onClick={() => setIsWaccModalOpen(true)} className="text-sm flex items-center space-x-1 text-sky-400 hover:text-sky-300"><Calculator className="w-4 h-4"/><span>WACC Detail</span></button>
                    </div>
                    <div className="space-y-4">
                        <Slider label="WACC" value={wacc} onChange={setWacc} min={6} max={12} step={0.1} unit="%" />
                        <Slider label="Terminal Growth Rate" value={terminalGrowth} onChange={setTerminalGrowth} min={1} max={5} step={0.1} unit="%" />
                    </div>
                    <div className="mt-6">
                        <h5 className="text-md font-semibold text-gray-200 mb-2">Free Cash Flow Projections ($M)</h5>
                        <div className="grid grid-cols-3 lg:grid-cols-5 gap-2">
                            {cashFlows.map((cf, i) => (
                                <div key={i}>
                                    <label className="text-xs text-gray-400">Year {i + 1}</label>
                                    <input type="number" value={cf} onChange={e => setCashFlows(prev => { const n = [...prev]; n[i] = parseFloat(e.target.value) || 0; return n; })} className="w-full p-2 bg-gray-900 border border-gray-700 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-sky-500"/>
                                </div>
                            ))}
                        </div>
                    </div>
                    <div className="mt-6 p-4 bg-gradient-to-br from-sky-900/50 to-gray-900/50 rounded-lg border border-sky-700">
                        <h4 className="text-lg font-bold text-sky-300">Implied Enterprise Value</h4>
                        <p className="text-3xl font-mono text-white">{formatLargeNumber(dcfAnalysis.enterpriseValue)}</p>
                        <div className="text-xs mt-2 grid grid-cols-2 gap-x-4 text-gray-300">
                            <p>PV of FCF: {formatLargeNumber(dcfAnalysis.pvCashFlows)}</p>
                            <p>PV of TV: {formatLargeNumber(dcfAnalysis.pvTerminalValue)}</p>
                        </div>
                    </div>
                </div>
                <div>
                    <h4 className="text-lg font-semibold text-gray-100 mb-3">Valuation Sensitivity Analysis</h4>
                    <ResponsiveContainer width="100%" height={300}>
                        <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>
                            <CartesianGrid strokeDasharray="3 3" stroke="#4A5568" />
                            <XAxis dataKey="wacc" type="number" name="WACC" unit="%" domain={['dataMin', 'dataMax']} tick={{ fill: '#A0AEC0' }} />
                            <YAxis dataKey="growth" type="number" name="Growth" unit="%" domain={['dataMin', 'dataMax']} tick={{ fill: '#A0AEC0' }} />
                            <ZAxis dataKey="value" type="number" range={[50, 800]} name="Value" unit="M" />
                            <Tooltip cursor={{ strokeDasharray: '3 3' }} contentStyle={{ backgroundColor: '#1A202C', border: '1px solid #4A5568' }} formatter={(value) => formatLargeNumber(value)} />
                            <Legend wrapperStyle={{ color: '#A0AEC0' }} />
                            <Scatter name="Valuation" data={sensitivityData} fill="#2DD4BF" shape="circle" />
                        </ScatterChart>
                    </ResponsiveContainer>
                </div>
            </div>
            <div>
                <h4 className="text-lg font-semibold text-gray-100 mb-3">Monte Carlo Simulation (Probabilistic Valuation)</h4>
                <button onClick={runMonteCarlo} className="mb-4 px-4 py-2 bg-sky-600 hover:bg-sky-500 rounded-md text-white font-semibold flex items-center space-x-2 transition-all"><Zap className="w-4 h-4" /><span>Run 10,000 Iterations</span></button>
                {monteCarloSims && (
                    <ResponsiveContainer width="100%" height={250}>
                        <BarChart data={monteCarloSims}>
                            <CartesianGrid strokeDasharray="3 3" stroke="#4A5568" />
                            <XAxis dataKey="name" tick={{ fill: '#A0AEC0', fontSize: 10 }} angle={-30} textAnchor="end" height={50} />
                            <YAxis tick={{ fill: '#A0AEC0' }} label={{ value: 'Frequency', angle: -90, position: 'insideLeft', fill: '#A0AEC0' }} />
                            <Tooltip contentStyle={{ backgroundColor: '#1A202C', border: '1px solid #4A5568' }} />
                            <Bar dataKey="count" name="Frequency" fill="#818CF8" />
                        </BarChart>
                    </ResponsiveContainer>
                )}
            </div>
        </div>
    );
};
export default DCFCalculator;

// ... (Other components will follow the same pattern)
// NOTE: To keep this response manageable, I've only shown a few component files. 
// The rest of the components from the previous turn (like ComparableCompanyAnalysis, SynergyEngine, etc.)
// should be created as separate files in their respective folders (`src/components/valuation`, `src/components/synergy`, etc.)
// following the same export/import pattern.

// =================================================================
// FILE: src/data/mockData.js
// =================================================================
export const mockAcquirer = { name: 'Global Tech Inc.', eps: 5.25, sharesOutstanding: 500 }; // shares in millions
export const mockTarget = { name: 'Innovate AI', revenue: 450, ebit: 90, netIncome: 60, sharesOutstanding: 100 }; // financials in millions, shares in millions

export const mockPeerCompanies = [
    { name: 'Alpha Corp', sector: 'Tech', ev: 12000, revenue: 3000, ebitda: 1500, pe: 25 },
    { name: 'Beta Inc.', sector: 'Tech', ev: 15000, revenue: 3500, ebitda: 1800, pe: 28 },
    // ... more peers
];

export const mockPrecedentTransactions = [
    { date: '2023-05-15', target: 'Innovate AI', acquirer: 'Global Tech Inc.', value: 1200, premium: 25, multiple: 15.2 },
    // ... more transactions
];

export const mockMarketNews = [
    { source: 'Reuters', time: '2m ago', headline: 'Fed holds interest rates steady, signals potential cuts in late 2025.' },
    // ... more news
];

export const mockRiskItems = [
    { id: 1, category: 'Integration', risk: 'Cultural clash between agile startup and established corporate structures.', mitigation: 'Phased integration plan with joint leadership teams.'},
    // ... more risks
];


// =================================================================
// FILE: src/utils/formatters.js
// =================================================================
export const formatLargeNumber = (value) => {
    if (value == null || !isFinite(value)) return 'N/A';
    if (Math.abs(value) >= 1e9) return `$${(value / 1e9).toFixed(2)}B`;
    if (Math.abs(value) >= 1e6) return `$${(value / 1e6).toFixed(2)}M`;
    if (Math.abs(value) >= 1e3) return `$${(value / 1e3).toFixed(2)}K`;
    return `$${value.toFixed(2)}`;
};

export const formatNumber = (value, decimals = 2) => value != null ? value.toLocaleString(undefined, { minimumFractionDigits: decimals, maximumFractionDigits: decimals }) : 'N/A';


// =================================================================
// FILE: src/utils/calculations.js
// =================================================================
export const calculateDCF = (cashFlowsInMillions, wacc, terminalGrowth) => {
    const cashFlows = cashFlowsInMillions.map(cf => cf * 1e6);
    if (wacc / 100 <= terminalGrowth / 100) return { enterpriseValue: Infinity, pvCashFlows: Infinity, pvTerminalValue: Infinity };
    const waccDecimal = wacc / 100;
    const growthDecimal = terminalGrowth / 100;
    const discountFactors = cashFlows.map((_, i) => 1 / Math.pow(1 + waccDecimal, i + 1));
    const presentValues = cashFlows.map((cf, i) => cf * discountFactors[i]);
    const pvCashFlows = presentValues.reduce((a, b) => a + b, 0);
    const terminalValue = (cashFlows[cashFlows.length - 1] * (1 + growthDecimal)) / (waccDecimal - growthDecimal);
    const pvTerminalValue = terminalValue * discountFactors[discountFactors.length - 1];
    const enterpriseValue = pvCashFlows + pvTerminalValue;
    return { enterpriseValue, pvCashFlows, pvTerminalValue };
};

// =================================================================
// FILE: src/index.js (Entry point)
// =================================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// =================================================================
// FILE: src/index.css (For Tailwind)
// =================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background-color: #0f172a; /* slate-900 */
  color: #e2e8f0; /* slate-200 */
  font-family: sans-serif;
}
